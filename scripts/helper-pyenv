#! /bin/sh

set -e
. /etc/profile
here=$(readlink -f "$0" | xargs dirname)

# Defaults.
DEFAULT_PYENV_URL=https://codeload.github.com/pyenv/pyenv/zip/master
DEFAULT_PYENV_PREFIX=/opt/pyenv
DEFAULT_PYENV_BUILD_DEPENDENCIES=$(echo "
    zlib-devel bzip2-devel ncurses-devel sqlite-devel readline-devel          \
    gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel tk tk-devel      \
")


# Clean function.
do_clean() {

    _pyenv_quiet=0
    _pyenv_root=${DEFAULT_PYENV_PREFIX}

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Cleaning PyEnv..."
    fi

    rm -f /tmp/python-*
    rm -f ${_pyenv_root}/lib/libpython*.a
    rm -rf ${_pyenv_root}/**/test
    find ${_pyenv_root}/ -noleaf -type f -name "*.py[co]" -exec rm -f {} \;

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    unset _pyenv_quiet
    unset _pyenv_root

}


# Configure function.
do_configure() {

    _cwd=$(pwd)
    _tmp=/tmp

    _pyenv_quiet=0
    _pyenv_root=${DEFAULT_PYENV_PREFIX}

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Configuring PyEnv..."
        echo "      ---> PyEnv: downloading..."
    fi
    cd ${_cwd}
    curl -s ${DEFAULT_PYENV_URL} -o pyenv.zip
    unzip -q pyenv.zip pyenv-master/*
    mv pyenv-master ${_pyenv_root}
    rm -f pyenv.zip

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo "      ---> PyEnv: cleaning..."
    fi
    rm -f ${_pyenv_root}/Makefile
    rm -f ${_pyenv_root}/Dockerfile
    rm -rf ${_pyenv_root}/test
    rm -rf ${_pyenv_root}/**/test
    find ${_pyenv_root} -type f -name "*.md" -exec rm -f {} \;
    find ${_pyenv_root} -type f -name "*.png" -exec rm -f {} \;

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo "      ---> PyEnv: adding to profile..."
    fi
    rc3=/etc/profile.d/03-set-pyenv.sh
    echo "# Enable PyEnv" > $rc3
    echo "export PYENV_ROOT=${_pyenv_root}" >> $rc3
    echo "export PATH=\$PYENV_ROOT/bin:\$PATH" >> $rc3
    echo 'eval "$(pyenv init -)"' >> $rc3
    echo "" >> $rc3

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    unset _pyenv_quiet
    unset _pyenv_root

}


# Install headers function.
do_install_dev() {

    _pyenv_quiet=0

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Installing PyEnv build dependencies..."
    fi

    sh ${here}/helper yum install ${DEFAULT_PYENV_BUILD_DEPENDENCIES}

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    unset _pyenv_quiet

}


# Remove headers function.
do_remove_dev() {

    _pyenv_quiet=0

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Removing PyEnv build dependencies..."
    fi

    yum -y remove ${DEFAULT_PYENV_BUILD_DEPENDENCIES} >/dev/null
    yum clean all >/dev/null

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    unset _pyenv_quiet

}


# Install function.
do_install() {

    _pyenv_quiet=0
    _pyenv_pyversion=3.9

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            -v | --version)
                shift
                _pyenv_pyversion="$1"
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    _pyenv_pyversion_xyz=$(pyenv install --list                               \
                           | grep -Ee " ${_pyenv_pyversion}.[0-9]+$"          \
                           | tail -n1 | tr -d " ")

    _pyenv_pyfolder=${PYENV_ROOT}/versions/${_pyenv_pyversion}
    _pyenv_pyfolder_xyz=${PYENV_ROOT}/versions/${_pyenv_pyversion_xyz}

    # Install build headers.
    sh ${here}/helper pyenv install-dev

    # Install OpenSSL.
    _openssl_version=1.0.2
    sh ${here}/helper openssl install -v "${_openssl_version}"

    # Install the specified Python version.
    sh ${here}/helper openssl link -v "${_openssl_version}"

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Installing Python ${_pyenv_pyversion}..."
        echo "      ---> Python ${_pyenv_pyversion}: installing..."
    fi
    pyenv install "${_pyenv_pyversion_xyz}"
    ln -s ${_pyenv_pyfolder_xyz} ${_pyenv_pyfolder}

    # Update profile to start this Python shell as default.
    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo "      ---> Python ${_pyenv_pyversion}: adding to profile..."
    fi
    rc4=/etc/profile.d/04-set-pyenv-version.sh
    echo "pyenv shell ${_pyenv_pyversion}" > $rc4
    echo "" >> $rc4

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    # Cleanup PyEnv.
    if [ ${_pyenv_quiet} -ne 0 ]; then
        _pyenv_clean_arg=-q
    fi
    sh ${here}/helper pyenv clean ${_pyenv_clean_arg}

    # Uninstall OpenSSL.
    sh ${here}/helper openssl unlink
    sh ${here}/helper openssl remove -v "${_openssl_version}"

    # Uninstall build headers.
    sh ${here}/helper pyenv remove-dev

    unset _pyenv_quiet
    unset _pyenv_pyversion
    unset _pyenv_pyversion_xyz
    unset _pyenv_pyfolder
    unset _pyenv_pyfolder_xyz
    unset _pyenv_clean_arg
    unset _openssl_version

}


# Upgrade function.
do_upgrade() {

    _pyenv_quiet=0
    _pyenv_pyversion=3.9

    # Parse arguments.
    while [ $# -gt 0 ]; do
        case "$1" in
            -q | --quiet)
                _pyenv_quiet=1
            ;;
            -v | --version)
                shift
                _pyenv_pyversion="$1"
            ;;
            *)
                echo "Unknown option '$1'"
                exit 1
            ;;
        esac
        shift
    done

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Upgrading Python ${_pyenv_pyversion}..."
    fi
    pyenv shell ${_pyenv_pyversion}
    _ab=$(echo "${_pyenv_pyversion}" | tr -d ".")
    pip install --no-cache-dir --upgrade -r "${here}/requirements/py${_ab}.txt"

    if [ ${_pyenv_quiet} -ne 0 ]; then
        _pyenv_clean_arg=-q
    fi
    sh ${here}/helper pyenv clean ${_pyenv_clean_arg}

    if [ ${_pyenv_quiet} -eq 0 ]; then
        echo " ---> Done!..."
    fi

    unset _pyenv_quiet
    unset _pyenv_pyversion
    unset _pyenv_clean_arg
    unset _ab

}


# Main script.
case "$1" in
    clean)
        shift
        do_clean $@
    ;;
    configure)
        shift
        do_configure $@
    ;;
    install)
        shift
        do_install $@
    ;;
    install-dev)
        shift
        do_install_dev $@
    ;;
    remove-dev)
        shift
        do_remove_dev $@
    ;;
    upgrade)
        shift
        do_upgrade $@
    ;;
    *)
        echo "Unknown option '$1'"
        exit 1
    ;;
esac
